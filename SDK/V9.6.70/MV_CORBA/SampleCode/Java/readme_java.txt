MetaView Corba SDK
=============

This directory contains the resources needed to develop Corba applications for
use with MetaView.  For information about using the Corba interface please see
the "MetaView API Programmer's Guide".

Note that all the sample applications are written to manage specific versions
of CFS / UMG / IS.  They do not follow all of the rules described in the
"MetaView API Programmer's Guide" for a forwards compatible application,
and as such may need to be modified to support future versions of
CFS / UMG / IS.

These sample applications require Jacorb 3.9 or later.

..\..\Definition\idl
---------

This directory contains the '.idl' files that describe the MetaView interfaces
available to Corba applications.

It also contains the file 'idl.config' which can be used by idlj to add
package prefixes to the generated Java interface files.


--------------

This directory contains bldCommon.bat, a batch file for generating
Java interface files from the Corba IDL (see above) and then compiling them.

It also contains bldSecure.bat, which is used by all of the applications that
log into the MetaView Server using security certificates and do not require the
server to be in insecure mode.  These applications require the following 3rd
party toolkits:

Required:
 JDK7 or later
 jacorb-.jar                 The Jacorb ORB, IMR, IR and NamingService.
 jacorb-omgapi.jar           The Jacorb core OMG API stubs.
 jacorb-services.jar         All other Jacorb services (e.g. Notification, DDS,
                                 Collection etc)
 slf4j-api.jar               Used for Jacorb logging.
 slf4j-jdk14.jar             Used for Jacorb logging.
 idlj.jar                    Tool for IDL generation.
 jboss-rmi-api_1.0_spec.jar  Support for CORBA java module from Java 11 onwards.
 avalon-framework.jar        Jacorb dependency.
 jacorbOverwriteSecurity.jar Creates and orchestrates the socket connection to
                             the server

All of the above libraries (with the exception of the JDK itself) are provided
with the SDK.

Sometimes required (see 'IAIK toolkit' below for details):
 iaik_jce.jar           The core IAIK-JCE security library. This must be the
                        signed version of the library.
 iaik_ssl.jar           The additional IAIK SSL library, iSaSiLk.

IAIK toolkit (iaik_jce.jar and iaik_ssl.jar):
  - The included sample applications GetValueSecure and QueryFields require IAIK. 
  - The IAIK toolkit is not provided with the SDK as it must be separately 
    commercially licensed. For more information, see http://jce.iaik.tugraz.at/.

The 'common' sub-directory contains some useful helper classes for managing the
Orb, logging in to a MetaView Server and traversing the MetaView object tree.

It also contains several example Corba applications that use these interfaces,
each of which is stored in the following directory structure:

.\<example>
|
+-src         Directory containing source code for the application.
|             A full overview of what each example application does can be
|             found in the comments at the top of the file <example>.java
|
+-build.bat   Windows batch file for compiling the example application
|
+-run.bat     Windows batch file for running the example application

All compiled code will be written to ..\classes.


Notes:

- You should copy the whole of the MV_CORBA\ directory onto your computer

- The build and run batch jobs must be run from the appropriate
  MV_CORBA\SampleCode\Java\<example> directory.

- You must put javac (the Java compiler) and jar (the Java JAR packager) into
  your PATH environment variable before running any of the build.bat batch
  jobs.

- When building and running the secure applications, you must put the IAIK JAR 
  files listed under "Sometimes required" above in the
  MV_CORBA\SampleCode\Java\classes directory.  These require separate
  license agreements.

- The CorbaHelperSecure.java file contains a placeholder for the 
  CLIENT_KEY_PASS_PHRASE credential.
  If you are using the default MVE certificates, then you should obtain this 
  credential from your secure craft administrator. If you are using custom
  private keys e.g. for application login then this is the passphrase used
  to encrypt the client private key.
  You should replace the placeholder with it before compiling applications.

- When running the secure applications, you must either put the MetaView Client
  certificate files (MVSCA.der, MVSClient.der and MVSClient.key) in the
  current directory and specify a username and password, or use signed certificate
  files generated by the Communities MOP - Replace the default MetaView Server and
  MetaView Explorer client certificates.

  - The MetaView Client certificates can be found in the "lib" directory under
    the directory in which you installed the MetaView Client.

  - If you are using custom certificates , you must run the secure application 
    once (and it will fail to log in), then use the MetaView Client to find the 
    new Security Certificate object that will have been created on the server.  
    Set the "Certificate authorized" field to True, then you can run the secure 
    application again, and it will be able to log in.