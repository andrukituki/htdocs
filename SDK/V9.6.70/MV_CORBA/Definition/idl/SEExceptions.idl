//-----------------------------------------------------------------------------
// File: SEExceptions.idl
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// Highly Confidential Material
//
//-----------------------------------------------------------------------------

#ifndef SEExceptions_idl
#define SEExceptions_idl

interface SEExceptionsInterface
{
/**
 * General comments on exceptions on the EMS CORBA API.
 *
 * This file defines all exceptions declared on EMS CORBA API methods.
 * In addition, the API user may receive CORBA system exception (resulting
 * from communication failures and ORB failures) and, importantly,
 * org.omg.CORBA.UNKNOWN exceptions that result from internal system failures
 * on the EMS Server.  If the API user receives a CORBA.UNKNOWN exception
 * then this should be reported to MetaSwitch support organization.  When a
 * CORBA.UNKNOWN exception is thrown a "Significant EMS system error" log will
 * be generated on the EMS Server: this provides more details on the cause of
 * the problem.
 *
 *
 * Fields in declared exceptions:
 *
 * nlsText
 *
 * All exceptions declared on the EMS CORBA API contain an nlsText field.
 * This is an NLS-enabled string providing more detail on the cause of the
 * exception.  If setNLSLocale has been invoked on the ClientSessionInterface
 * then the nlsText field will contain the human-readable interpreted form of
 * the string. Any characters falling outside of the ISO 8859-1 character set
 * will be converted to a '?' character.
 *
 * wideNlsText
 *
 * This field is a wide-string equivalent of the nlsText field, in which
 * characters falling outside the ISO 8859-1 character set will be transported
 * correctly.
 *
 * mainReturnCode
 *
 * This field contains the main return code for this operation.  If the value
 * is non-zero then it will be one of the constants defined below that starts
 * with RC_.  These return codes provide a programmatic mechanism for
 * indicating the reason for a request failure.
 *
 * subReturnCode
 *
 * This field contains a sub return code providing information additional to
 * the main return code. If the value is non-zero then it will be one of the
 * ES_ constants declared below.
 *
 * erroredField
 *
 * This string contains the programmatic name of the field whose value was
 * in error.  Contains a zero-length string if the field is unknown or not
 * relevent.
 *
 * errorLogIndex
 *
 * Contains the index value of a log generated as a result of the failure of
 * this request.  The log provides a detailed description of why the request
 * failed and how to fix it.  The logCorrelator values are unique within
 * a particular MetaSwitch/EMS Server.  The neIdentifier can be used
 * to determine the source of the log.
 *
 * errorNEName
 *
 * The name of the EMS or MetaSwitch on which the logCorrelator was generated.
 * If this field contains a zero-length string then the logCorrelator was
 * generated by the EMS Server.  This field is only valid if the logCorrelator
 * value is non-zero.
 *
 * neIdentifier
 *
 * The unique identifier of the EMS or MetaSwitch on which the logCorrelator
 * was generated.  If this field contains a zero-length string then the
 * log was generated on the EMS Server.  This field is only valid if the
 * logCorrelator value is non-zero.
 */

//-----------------------------------------------------------------------------
//
// Constants defining possible values for the rc field.
//
//-----------------------------------------------------------------------------

/**
 * Error not described by any other return code.
 */
const long RC_GEN_ERROR               = 2;

/**
 * A field value specified is not valid.
 */
const long RC_WRONG_VALUE             = 3;

/**
 * A field value specified is not legal because of the values of some
 * other fields.
 */
const long RC_INCONSISTENT_VALUE      = 4;

/**
 * This request could not be processed due to resource failure.
 */
const long RC_RESOURCE_UNAVAILABLE    = 5;

/**
 * The SE has been deleted.
 */
const long RC_NO_SUCH_OBJECT          = 6;

/**
 * Indicates an internal error in the EMS Server or MetaSwitch.
 */
const long RC_AGENT_ERROR             = 8;

/**
 * A request has been rejected because the system is not ready.  The
 * request should be retried.
 */
const long RC_STARTUP_IN_PROGRESS     = 11;

/**
 * Indicates that the MetaSwitch has been updated in such a way as to
 * invalidate the object.
 */
const long RC_EMS_SYSTEM_UPDATED      = 13;

/**
 * Indicates that the logged in Client Session has expired.
 */
const long RC_LOGIN_EXPIRED           = 101;

/**
 * Indicates that the logged in User or application has insufficient privileges
 * to perform the requested operation.
 */
const long RC_INSUFFICIENT_PRIVILEGES = 102;

/**
 * Indicates that the User or application has not logged in.
 */
const long RC_NOT_LOGGED_IN           = 103;

/**
 * Indicates that operation failed because it took too long and a lock
 * (whether acquired implicitly or explicitly) has timed out.
 */
const long RC_LOCK_TIMEOUT            = 104;

/**
 * The connection to the primary MetaSwutch instance is not currently active.
 */
const long RC_EMS_ELEMENT_UNAVAILABLE = 201;

/**
 * The MetaSwitch has been deleted from the EMS's configuration.
 */
const long RC_EMS_ELEMENT_DELETED     = 202;

/**
 * The EMS is shutting down.
 */
const long RC_EMS_SHUTTING_DOWN       = 203;

/**
 * The EMS Server is not / no longer the primary EMS for managing this
 * MetaSwitch possibly because another EMS has take over as primary.
 */
const long RC_EMS_NOT_PRIMARY_EMS     = 204;

/**
 * Communication between the EMS Server and MetaSwitch took too long and was
 * timed out.
 */
const long RC_EMS_TIME_OUT            = 205;

/**
 * Indicates a failure due to memory shortage on the EMS Server.
 */
const long RC_EMS_RESOURCE_UNAVAILABLE= 206;

/**
 * Failure in the transport layer between the EMS Server and MetaSwitch.
 */
const long RC_EMS_MTL_FAILURE         = 207;

/**
 * MetaSwitch failover occurred and the request was lost.
 */
const long RC_EMS_SYNC_ERROR          = 208;

/**
 * The response returned by the MetaSwitch could not be interpreted by the EMS.
 */
const long RC_EMS_READ_STRUCT_FAILURE = 209;

/**
 * Indicates that the EMS Server has rejected the request because memory
 * usage has exceeded its configured threshold.
 */
const long RC_EMS_MEM_RSRCE_SHORTAGE  = 210;

/**
 * Indicates a failure due to the MetaSwitch being in read-only mode.
 */
const long RC_EMS_NE_IS_READ_ONLY = 211;

/**
 * Indicates that the system is temporarily unavailable, probably due to an
 * SNMP connection failure.
 */
const long RC_EMS_SYSTEM_UNAVAILABLE  = 212;

/**
 * Indicates that the Session Controller is temporarily unavailable, probably
 * due to a connection failure.
 */
const long RC_EMS_JSON_UNAVAILABLE  = 213;

/**
 * Indicates that an error occurred on the Session Controller while processing
 * this request.
 */
const long RC_EMS_JSON_OP_FAILED = 214;

/**
 * Indicates that a field value is inconsistent with the values of some other
 * field(s).
 */
const long RC_EMS_JSON_INCNSTNT_VALUES  = 215;

/**
 * Indicates that there is an inconsistency between the start after element
 * name supplied on a get next elements request and the supplied filter for the
 * find operation.
 */
const long RC_FOO_NAME_FILTER_MISMATCH  = 400;

/**
 * Indicates that there is a problem with the start after element name supplied
 * on a find operation get next elements request such that enumeration cannot
 * continue.
 *
 * In a find enumeration, the server may need to attach to the element
 * indicated by the start after element name so that it can "find its place" in
 * the enumeration and return the correct elements.  If the server cannot
 * determine this information (e.g.  the element indicated by the start after
 * element name no longer exists) an ElementOperationFailedException will be
 * thrown with this return code.
 *
 * It may be possible to recover from this situation by making a further get
 * next elements request by supplying a different start after element name, for
 * example the element that returned immediately before the original start
 * after element.
 */
const long RC_FOO_CANT_CONT_ENUMERATION = 401;

/**
 * Indicates that the specified MetaSwitch filter refers to a MetaSwitch which
 * does not exist.
 */
const long RC_FOO_META_FILTER_DELETED   = 402;

/**
 * Indicates that the specified MetaSwitch filter refers to a MetaSwitch which
 * is currently unavailable.
 */
const long RC_FOO_META_FILTER_UNAVAIL   = 403;

//-----------------------------------------------------------------------------
//
// Constants defining possible values for the subReturnCode field.
//
//-----------------------------------------------------------------------------

/**
 * A required field is missing.  Used in conjunction with the erroredField.
 */
const long ES_REQD_FIELD_MISSING       = 0x00000001;

/**
 * A supplied field is always read-only.  Used in conjunction with the
 * erroredField.
 */
const long ES_FIELD_READ_ONLY          = 0x00000002;

/**
 * A supplied field is not writeable.  The field is not read-only, nor is it
 * not writeable because of the current activation state, but is not writeable
 * for some other reason.
 *
 * For example, the field is only present in one National Variant, and
 * configuration indicates that a different National Variant is to be used.
 *
 * Used in conjunction with the erroredField.
 */
const long ES_FIELD_NOT_WRITEABLE      = 0x00000003;

/**
 * Applies to integer fields with a range.  A supplied field has a value
 * which is too small.  Used in conjunction with the erroredField.
 */
const long ES_VALUE_TOO_SMALL          = 0x00000004;

/**
 * Applies to integer fields with a range.  A supplied field has a value
 * which is too big.  Used in conjunction with the erroredField.
 */
const long ES_VALUE_TOO_BIG            = 0x00000005;

/**
 * A supplied field has an invalid value.  Used in conjunction with the
 * erroredField.
 */
const long ES_INVALID_VALUE            = 0x00000006;

/**
 * The field must have a unique value within the table.  Used
 * in conjunction with the erroredField.
 */
const long ES_VALUE_NOT_UNIQUE         = 0x00000007;

/**
 * The field is not consistent with other fields in this SE or in other SEs
 * of this type or even SEs of another type.
 *
 * This subcode is supplemented by comprehensive logs of what the
 * inconsistency is, and what action is required to correct it.
 *
 * The erroredField optionally indicates one of the inconsistent objects.
 */
const long ES_INCONSISTENT_VALUES      = 0x00000008;

/**
 * The specified field setting is not consistent with the setting of fields
 * in the parent SE.
 *
 * Used in conjunction with the erroredField.
 */
const long ES_INCONSISTENT_WITH_PARENT = 0x00000009;

/**
 * The specified value setting is not consistent with the currently set
 * value. This field can only accept a limited sequence of its valid values.
 *
 * For example, if a field has three possible values A, B, and C, and starts
 * with value A, it may not be valid to move directly to C. B must be set
 * first and then transitioned to C.
 *
 * Used in conjunction with the erroredField.
 */
const long ES_INCONSISTENT_SEQUENCE    = 0x0000000A;

/**
 * The string format is not recognized.  This is used for string fields
 * where the information is encoded using a distinct syntax, but where the
 * value's sequence of characters can not be interpreted by the product.
 * Used in conjunction with the erroredField.
 */
const long ES_INVALID_FORMAT           = 0x0000000B;

/**
 * A supplied field cannot have its value changed because of the current
 * activation status.  Used in conjunction with the erroredField.
 */
const long ES_INVALID_ROW_STATE        = 0x0000000C;

/**
 * A supplied field cannot have its value changed because of the current
 * activation status.  Used in conjunction with the erroredField.
 */
const long ES_INVALID_OPER_STATE       = 0x0000000D;

/**
 * The activation state cannot be changed because the current
 * activation state is effectively 'waiting for parent' or 'waiting for
 * dependent'.  This occurs when the activation state in the product is 'down'
 * or 'activation failed'.
 *
 * For example, some SEs cannot accept a disable action when activated because
 * they would auto-activate if a parent or dependent SE became active.
 */
const long ES_WAITING_FOR_PARENT       = 0x0000000E;

/**
 * The action is not supported.  For this subcode, the erroredField is
 * not used.
 */
const long ES_ACTION_NOT_SUPPORTED     = 0x0000000F;

/**
 * The SE does not exist.  For this subcode, the erroredField is not
 * used.  This subcode is not be used to
 * indicate that an SE is missing for any SE other than one for which this
 * request was intended.
 */
const long ES_ROW_MISSING              = 0x00000010;

/**
 * The parent SE is missing.
 * For this subcode, the erroredField field is not used.
 */
const long ES_PARENT_MIB_MISSING       = 0x00000011;

/**
 * The action cannot be performed due to the state of the parent SE.
 * For this subcode, the erroredField field is not used.
 */
const long ES_INVALID_PARENT_MIB_STATE = 0x00000012;

/**
 * A required child or referenced SE is missing.  For this subcode, the
 * erroredField is not used.
 */
const long ES_DEPENDENT_MIB_MISSING    = 0x00000013;

/**
 * A required child or referenced SE exists but is in the wrong state (for
 * example, disabled).  For this subcode, the erroredField is
 * not used.
 */
const long ES_DEPENDENT_MIB_STATE      = 0x00000014;

/**
 * Failure to allocate memory.  Types of 'memory' include buffers, handles
 * and control blocks.  For this subcode, the erroredField is not used.
 */
const long ES_MEMORY_ALLOCATION        = 0x00000015;

/**
 * Failure to allocate a resource (for example, no free TCP/IP socket).  For
 * this subcode, the erroredField is not used.
 */
const long ES_RESOURCE_ALLOCATION      = 0x00000016;

/**
 * A resource is missing (for example, no TCP/IP network).  For this
 * subcode, the erroredField is not used.
 */
const long ES_RESOURCE_MISSING         = 0x00000017;

/**
 * A resource is in the wrong state (for example, the TCP/IP network is not
 * enabled).  For this subcode, the erroredField is not used.
 */
const long ES_RESOURCE_STATE           = 0x00000018;

/**
 * The SE is read-only and cannot accept sets.  For this subcode, the
 * erroredField is not used.
 */
const long ES_ROW_READ_ONLY            = 0x00000019;

/**
 * Internal system error.
 */
const long ES_INT_BAD_OID_LENGTH       = 0x0000001A;

/**
 * Internal system error.
 */
const long ES_INT_BAD_DATA_LENGTH      = 0x0000001B;

/**
 * Internal system error.
 */
const long ES_INT_TEST_NOT_SUPPORTED   = 0x0000001C;

/**
 * Internal system error.
 */
const long ES_INT_FAMILY_NOT_DEFINED   = 0x0000001D;

/**
 * The requested action is already in progress.  Wait for the action to
 * complete, and then retry the action if required.  For this subcode, the
 * erroredField is not used.
 */
const long ES_ALREADY_IN_PROGRESS      = 0x0000001E;

/**
 * Only one instance of this SE type is supported, and an instance
 * already exists.  For this subcode, the erroredField is not used.
 */
const long ES_ONLY_ONE_INSTANCE_ALLWD  = 0x0000001F;

/**
 * The requested action is not supported while child SEs exist.  For
 * example, a particular parent object cannot be deleted until all child
 * objects have been deleted.  For this subcode, the erroredField is not
 * used.
 */
const long ES_DEPENDENT_MIB_EXISTS     = 0x00000020;

/**
 * The operation cannot be performed because another SE is referencing this
 * SE.  For example, it may not be valid to delete an SE if a field in a
 * second SE has a value which references the first SE. For this subcode,
 * the erroredField is not used
 */
const long ES_REFERENCED               = 0x00000021;

/**
 * Applies to fields of TYPE_INT32_MAPPING. The value supplied is not one
 * of the declared values.  If the supplied value is one of those declared
 * but the value is invalid because of the value of another field within the
 * SE then RC_INCONS_NOT_IN_GROUP should be used instead. Used in
 * conjunction with the erroredField.
 */
const long ES_VALUE_NOT_IN_GROUP       = 0x00000022;

/**
 * A mandatory field is not present.  Used in conjunction
 * with the erroredField.
 */
const long ES_MANDATORY_FIELD_MISSING  = 0x00000023;

/**
 * The field is not consistent with other fields in this SE
 *
 * This subcode is supplemented by comprehensive logs of what the
 * inconsistency is, and what action is required to correct it. However, if
 * possible a more specific subcode should be used that more tightly defines
 * the inconsistency without resort to logs.
 *
 * The erroredField optionally indicates one of the inconsistent objects.
 */
const long ES_INCONSISTENT_WITH_SELF   = 0x00000024;

/**
 * The field is not consistent with other SEs of the same type.
 *
 * This subcode is supplemented by comprehensive logs of what the
 * inconsistency is, and what action is required to correct it. However, if
 * possible a more specific subcode should be used that more tightly defines
 * the inconsistency without resort to logs.
 *
 * The erroredField optionally indicates one of the inconsistent objects.
 */
const long ES_INCONSISTENT_WITH_SAME   = 0x00000025;

/**
 * The field is not consistent with other SEs of a different SE type.
 *
 * This subcode is supplemented by comprehensive logs of what the
 * inconsistency is, and what action is required to correct it. However, if
 * possible a more specific subcode should be used that more tightly defines
 * the inconsistency without resort to logs.
 *
 * The erroredField optionally indicates one of the inconsistent objects.
 */
const long ES_INCONSISTENT_WITH_OTHER  = 0x00000026;

/**
 * Applies to fields of TYPE_INT32_MAPPING.  The value supplied is one of
 * the declared values but the value is invalid because of the value of
 * another field within the se.  Used in conjunction with the erroredField.
 */
const long ES_INCONS_NOT_IN_GROUP      = 0x00000027;

/**
 * Applies to integer fields. The value supplied is within the range
 * declared by the SE, but the value is smaller than that
 * permitted because of the value of another field within the SE.
 * For example, because of a field defining an alternative variant.
 * Used in conjunction with the erroredField.
 */
const long ES_INCONS_TOO_SMALL         = 0x00000028;

/**
 * Applies to integer fields. The value supplied is within the range
 * declared by the SE, but the value is greater than that
 * permitted because of the value of another field within the SE.
 * For example, because of a field defining an alternative variant.
 * Used in conjunction with the erroredField.
 */
const long ES_INCONS_TOO_BIG           = 0x00000029;

/**
 * The value of the requested status is supported but not valid because of the
 * current actual status value.  For this subcode, the erroredField is
 * not used.
 */
const long ES_ROW_STATE_CHANGE_OPER    = 0x0000002A;

/**
 * The indices specify an SE that already exists.
 * For this subcode, the erroredField is not used.
 */
const long ES_ROW_ALREADY_EXISTS       = 0x0000002B;

/**
 * The exposed version of the system has changed.
 */
const long ES_SW_VERSION_CHANGED       = 0x0000002F;

/**
 * The system ID has changed.
 */
const long ES_SYSTEM_ID_CHANGED        = 0x00000030;

/**
 * Indicates that the Log database is unavailable.
 */
const long ES_LOG_DATABASE_UNAVAILABLE = 0x00000031;

/**
 * Indicates that the requested Log is unavailable.
 */
const long ES_LOG_UNAVAILABLE          = 0x00000032;

/**
 * Indicates that the details used by this User to login have changed and so
 * the client session has been terminated.
 */
const long ES_LOGIN_DETAILS_CHANGED    =  0x00010000;

/**
 * Indicates that the client session has timed out or that the EMS Server
 * has restarted. In both cases the User must obtain a new client session
 * by logging in again.
 */
const long ES_RELOGIN_REQUIRED         =  0x00020000;
};

/**
 * Thrown if the SE's lock which was previously obtained by invoking the lock
 * method has expired.  SE locks expire/timeout after a fixed period of 30
 * seconds.  Those methods that declare the LockTimeoutException
 * will not throw this exception if the lock method has not been explicitly
 * called by the SEAccessInterface user.
 */
exception LockTimeoutException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown if the SE has been deleted.
 */
exception ElementDeletedException
{
  string  nlsText;
  long    mainReturnCode;
  long    subReturnCode;
  wstring wideNlsText;
};

/**
 * Thrown if the requested operation failed to complete successfully.
 * See the comment at the top of this file for details on individual fields.
 */
exception ElementOperationFailedException
{
  string    nlsText;
  long      mainReturnCode;
  long      subReturnCode;
  string    erroredField;
  long long errorLogIndex;
  string    errorNEName;
  string    neIdentifier;
  wstring   wideNlsText;
};

/**
 * The request failed because the MetaSwitch, or the configuration on the
 * EMS Server, could not be accessed.  This may be because of a
 * communications failure between the EMS Server and the MetaSwitch; or
 * one of the systems may be starting up.
 *
 * See the comment at the top of this file for details on individual fields.
 */
exception ElementUnavailableException
{
  string    nlsText;
  long      mainReturnCode;
  long      subReturnCode;
  string    erroredField;
  long long errorLogIndex;
  string    errorNEName;
  string    neIdentifier;
  wstring   wideNlsText;
};

/**
 * Some subcomponent of the SE is missing; it may have been deleted.
 * Fixing this situation requires explicit action by the user
 * to reconstitute the SE.  The user should refer to the nlsText field for
 * details.
 *
 * See the comment at the top of this file for details on individual fields.
 */
exception ElementBrokenException
{
  string    nlsText;
  long      mainReturnCode;
  long      subReturnCode;
  string    erroredField;
  long long errorLogIndex;
  string    errorNEName;
  string    neIdentifier;
  wstring   wideNlsText;
};

/**
 * Indicates that a field value is incorrect: the value is wrong or
 * inconsistent.  The user should refer to the nlsText and other fields in this
 * exception for details.
 *
 * See the comment at the top of this file for details on individual fields.
 */
exception SettingsFieldException
{
  string    nlsText;
  long      mainReturnCode;
  long      subReturnCode;
  string    erroredField;
  long long errorLogIndex;
  string    errorNEName;
  string    neIdentifier;
  wstring   wideNlsText;
};

/**
 * The SE's state has been changed by another user since this user
 * last called getSnapshot.  This user must call getSnapshot, discarding any
 * outstanding changes made to their local SettingsUserInterface.
 */
exception ElementChangedException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The request to create an SE by attachToNew failed.  The reason for the
 * failure will be detailed in the nlsText field.
 */
exception CreationFailedException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The unlock request failed because the SE is not locked by this user.
 */
exception ElementNotLockedException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The lock request failed because the SE is already locked by this user.
 */
exception ElementAlreadyLockedException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The attachTo or attachToNew request failed because this SEAccessInterface
 * is already attached to an SE.
 */
exception AlreadyAttachedException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The request failed because the SEAccessInterface must be attached to an SE
 * to perform this operation.
 */
exception NotAttachedException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The supplied SE name is not a valid name.  This does not mean that the
 * SE does not exist.  Rather that the structure of the name is not valid.
 */
exception InvalidNameException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The request failed because the supplied elementType parameter is not a valid
 * element type. This is thrown if the elementType does not exist or, for
 * example, if the elementType must be a possible child type and is not.
 */
exception InvalidElementTypeException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The supplied filter is not valid.  See comments on individual methods that
 * declare this exception.
 */
exception InvalidFilterException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The SE's name is not known because the SE has not been fully created.
 * This is the case after an attachToNew, before the first successful
 * doAction(APPLY).
 */
exception NameUnknownException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The specified action is not supported by this SE under any circumstance.
 * All supported actions are listed in the SEProperties object returned on
 * attachment.
 */
exception UnknownActionException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The specified action is currently  not valid due to the state of the SE.
 * This indicates that the action is supported by this SE under some
 * circumstances but not currently.  For example, if an SE is active invoking
 * the activate action would throw an ActionNotEnabledException.
 */
exception ActionNotEnabledException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown on a removeSnapshotChangeListener request if no interface is
 * currently registered as listening.
 */
exception NoSnapshotChangeListenersException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown on an addSnapshotChangeListener request if an interface is already
 * registered as listening. Only one SnapshotChangeListener is allowed.
 */
exception TooManySnapshotChangeListenersException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown if a method is invoked on a SettingsUserInterface field of the wrong
 * type.  For example, this exception is thrown if getFieldAsLongByIndex is
 * invoked on a field of type TYPE_STRING.
 */
exception FieldBadTypeException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown if a method invocation attempts to set a field with a value that is
 * not valid.  The nlsText string details why the value is not valid.
 */
exception FieldBadValueException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown if the fieldName or fieldIndex value passed on a
 * SettingsUserInterface method invocation does not refer to a valid field.
 */
exception FieldNameOrIndexNotFoundException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown by the "possible values" methods on the SettingsUserInterface
 * if the field does not have a PossibleValuesProvider.  If the
 * hasPossibleValues method returns true then this exception will not be
 * thrown.
 */
exception FieldNoRegisteredPVPException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown by the "get adjustmnents" methods on the SettingsUserInterface
 * if the field does not have an AdjustmentsProvider.  If the
 * hasAdjustments method returns true then this exception will not be
 * thrown.
 */
exception FieldNoRegisteredAPException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown if an error occurs serializing or deserializing a
 * SettingsUserInterface object.
 */
exception ReadWriteSettingsException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown if login fails.  The nlsText field details why the login failed.
 */
exception LoginFailedException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown if the supplied country and language codes do not form a recognized
 * Locale for which the EMS Server has National Language Support.  For example,
 * if "FR" & "fr" are passed to an EMS Server that does not support NLS
 * translation to French then this exception is thrown.
 */
exception UnsupportedLocaleException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown if the NLSIID supplied to the makeDisplayText method is not an
 * NLS key recognized by the EMS Server.  All NLSIIDs returned by the EMS
 * Server are recognized so if the interface it adhered to this is an
 * assertable condition.
 */
exception UnrecognizedNLSIIDException
{
  string  nlsText;
  wstring wideNlsText;
};


/**
 * Thrown if the range of EMS object versions, specified by the
 * lowestSuppliedVersion and highestSuppliedVersion parameters on the
 * ClientSessionManager login methods, does not overlap with the range of EMS
 * object versions supported by the EMS.
 */
exception VersionNotSupportedException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * Thrown if the format of a version identifier is not as expected.  See the
 * ClientSessionManagerInterface login methods for more information.
 */
exception VersionFormatException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * The supplied indices are not valid for the element type.  This does not mean
 * that the SE does not exist.  Rather that the indices are not valid for an
 * element of the specified type.
 */
exception BadIndicesException
{
  string  nlsText;
  wstring wideNlsText;
};

/**
 * A log matching the specified correlator and MetaSwitch identifier could
 * not be found.  Reasons for this include:
 * - the log has not yet been retreived from the MetaSwitch,
 * - the log has been retreived from the MetaSwitch, but has since been
 *   deleted,
 * - the log has been filtered out,
 * - the EMS log storage facility is not currently available,
 * - the ClientSession has expired.
 */
exception LogNotFoundException
{
  string  nlsText;
  long    mainReturnCode;
  long    subReturnCode;
  wstring wideNlsText;
};

/**
 * Thrown if the EMS is not yet able to perform a requested
 * operation because it is still performing some internal
 * processing.  This can happen both at start of day, and following
 * any changes to its managed network, such as MetaSwitch
 * connections going unavailable or coming back.
 */
exception EMSNotReadyException
{
  string  nlsText;
  wstring wideNlsText;
};

#endif
