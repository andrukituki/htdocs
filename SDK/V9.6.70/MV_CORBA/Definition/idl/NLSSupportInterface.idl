//-----------------------------------------------------------------------------
// File: NLSSupportInterface.idl
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// Highly Confidential Material
//
//-----------------------------------------------------------------------------

#ifndef NLSSupportInterface_idl
#define NLSSupportInterface_idl

#include "SEExceptions.idl"
#include "SettingsUserInterface.idl"

/**
 * Structure used to identify a National Language locale.
 * Returned from getLocale and used on the makeDisplayText methods.
 * This structure is read only.
 */
struct NLSLocale
{
  /**
   * Idenifier of the specific NLS Locale.  This string is interpretable only
   * by the EMS Server and is read only.
   */
  string localeIdentifier;
};

/**
 * The NLSSupportInterface provides translation from National Language Support
 * (NLS) enabled text into human-readable displayable text.
 */
interface NLSSupportInterface
{
   /**
    * Resource type identifier used on the makeDisplayTextFromLogID[WithParams]
    * methods to request the log "Severity" information.
    */
   const long NLS_LOG_LEVEL       = 2;

   /**
    * Resource type identifier used on the makeDisplayTextFromLogID[WithParams]
    * methods to request the log "Cause" information.
    */
   const long NLS_LOG_CAUSE       = 3;

   /**
    * Resource type identifier used on the makeDisplayTextFromLogID[WithParams]
    * methods to request the log "Effect" information.
    */
   const long NLS_LOG_EFFECT      = 4;

   /**
    * Resource type identifier used on the makeDisplayTextFromLogID[WithParams]
    * methods to request the log "Action" information.
    */
   const long NLS_LOG_ACTION      = 5;

   /**
    * Resource type identifier used on the makeDisplayTextFromLogID[WithParams]
    * methods to request the log "Description" information.
    */
   const long NLS_LOG_DESCRIPTION = 6;

  /**
   * Verifies the passed NLS locale specifiers and returns a Locale structure
   * that can be supplied to other NLSSupportInterface methods.
   *
   * @param  The language parameter is a valid ISO Language Code. These codes
   *         are the lower-case two-letter codes as defined by ISO-639.
   *         The language "en" is guaranteed to be supported.
   * @param  The country parameter is a valid ISO Country Code. These codes are
   *         the upper-case two-letter codes as defined by ISO-3166.
   *         The country "US" is guaranteed to be supported.
   *
   * @throws UnsupportedLocaleException  If the supplied country and language
   *   codes do not form a recognized Locale for which the EMS Server has
   *   National Language Support.  For example, if "FR" & "fr" are passed to
   *   an EMS Server that does not support NLS translation to French then this
   *   exception is thrown.
   **/
  NLSLocale getLocale(in string language, in string country)
      raises (UnsupportedLocaleException);

  /**
   * Translates the NLS-enabled maybeNLSText string into a human-readable
   * displayable string specific to the Locale defined by nlsLocale.
   * If the maybeNLSText string is not an NLS-enabled string generated by
   * the EMS Server, then the returned string is maybeNLSText and
   * the value of isNLSText is false; otherwise the value of isNLSText is
   * true.
   *
   * @param maybeNLSText  String to translate.  This should be a string
   *                      returned by the EMS Server from a method that
   *                      declares it to be an NLS string.
   * @param locale        NLSLocale structure returned by getLocale that
   *                      specifies the Locale into which the maybeNLSText
   *                      should be translated.
   * @param isNLSText     Boolean out parameter that is true if the
   *                      maybeNLSText string contained NLS-enabled text
   *                      that was translated or false if it was not
   *                      NLS-enabled text.
   * @return              String containing either a translation of an
   *                      NLS-enabled string (if isNLSText is true) or
   *                      the original maybeNLSText string (if isNLStext
   *                      is false).
   */
  string makeDisplayText(in string maybeNLSText,
                         in NLSLocale locale,
                         out boolean isNLSText);

  /**
   * Translates the NLS Integer IDentifier (NLSIID) into a human-readable
   * displayable string specific to the Locale defined by nlsLocale.
   * Only NLS-enabled integers should be passed as NLSIIDs.
   *
   * @param maybeNLSText  String to translate.  This should be a string
   *                      returned by the EMS Server from a method that
   *                      declares it to be an NLS string.
   * @param locale        NLSLocale structure returned by getLocale that
   *                      specifies the Locale into which the NLSIID
   *                      should be translated.
   * @return              String containing a translation of the NLSIID
   *                      into human-readable displayable form.
   * @throws UnrecognizedNLSIIDException  If the NLSIID is not recognized by
   *                      the EMS Server as a valid NLS key.
   */
  string makeDisplayTextFromNLSIID(in long NLSIID,
                                   in NLSLocale locale)
      raises (UnrecognizedNLSIIDException);

  /**
   * Obtains the information associated with a log ID in an NLS-translated
   * displayable form.  The logs are stored and retrieved from a database on
   * the EMS Server.  The log ID included in each log provides a correlator
   * for accessing additional resources/information.  This method takes the
   * log ID and returns the resource/information type as specified by
   * resourceType.  The resource types include: the log "Severity" level,
   * "Cause", "Effect", "Action" and "Description" as documented in the
   * explanation of the EMS Server Log Database.
   *
   * This method should only be used for translating log IDs.
   *
   * @param logID         A log identifier as documented for the logs database.
   * @param resourceType  One of the NLS_LOG_ constants defined above.
   * @param locale        NLSLocale structure returned by getLocale that
   *                      specifies the Locale into which information
   *                      associated with the logID should be translated.
   * @return              String containing information associated with the
   *                      passed logID in a Locale-specific translation.
   * @throws UnrecognizedNLSIIDException  If the logID is not recognized by the
   *                      EMS Server as a valid NLS key.
   */
  string makeDisplayTextFromLogID(in long logID,
                                  in long resourceType,
                                  in NLSLocale locale)
      raises (UnrecognizedNLSIIDException);

  /**
   * See makeDisplayTextFromLogID for initial information on the method and
   * its parameters.  This method extends the functionality of
   * makeDisplayTextFromLogID by taking a sequence of parameters that are
   * to be integrated into the outputted displayable text.  These parameters
   * are included as extra columns for each entry in the log database.  See
   * the EMS Server Log Database documentation for more information on which
   * columns to use.
   *
   * @param logID         A log identifier as documented for the logs database.
   * @param params        Sequence of strings containing the insertable values
   *                      that are to be added into the outputted display text.
   *                      The entries in the params sequence must be in the
   *                      order in which they occur as columns in the log
   *                      database.
   * @param resourceType  One of the NLS_LOG_ constants defined above.
   *                      Currently, only NLS_LOG_DESCRIPTION strings require
   *                      the additional params sequence.
   * @param locale        NLSLocale structure returned by getLocale that
   *                      specifies the Locale into which information
   *                      associated with the logID should be translated.
   * @return              String containing information associated with the
   *                      passed logID in a Locale-specific translation.
   * @throws UnrecognizedNLSIIDException  If the logID is not recognized by the
   *                      EMS Server as a valid NLS key.
   */
  string makeDisplayTextFromLogIDWithParams(in long logID,
                                            in SequenceOfNames params,
                                            in long resourceType,
                                            in NLSLocale locale)
      raises (UnrecognizedNLSIIDException);

  //---------------------------------------------------------------------------
  // Internal unpublished interface access
  //---------------------------------------------------------------------------

  /**
   * Refer to makeDisplayText for details of this method and its parameters.
   * This is an equivalent using wstring for all string parameters and return.
   */
  wstring makeWideDisplayText(in wstring maybeNLSText,
                              in NLSLocale locale,
                              out boolean isNLSText);

  /**
   * Refer to makeDisplayTextFromNLSIID for details of this method and its
   * parameters. This is an equivalent using wstring for all string 
   * parameters and return.
   */
  wstring makeWideDisplayTextFromNLSIID(in long NLSIID,
                                        in NLSLocale locale)
      raises (UnrecognizedNLSIIDException);

  /**
   * Refer to makeDisplayTextFromLogID for details of this method and its
   * parameters. This is an equivalent using wstring for all string parameters
   * and return.
   */
  wstring makeWideDisplayTextFromLogID(in long logID,
                                       in long resourceType,
                                       in NLSLocale locale)
      raises (UnrecognizedNLSIIDException);

  /**
   * Refer to makeDisplayTextFromLogIDWithParams for details of this method
   * and its parameters. This is an equivalent using wstring for all string
   * parameters and return.
   */
  wstring makeWideDisplayTextFromLogIDWithParams(in long logID,
                                                 in SequenceOfNames params,
                                                 in long resourceType,
                                                 in NLSLocale locale)
      raises (UnrecognizedNLSIIDException);
};

#endif
